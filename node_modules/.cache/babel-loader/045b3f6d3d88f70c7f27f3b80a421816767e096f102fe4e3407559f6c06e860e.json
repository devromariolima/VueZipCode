{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"cep-form\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[15] || (_cache[15] = _createElementVNode(\"h1\", null, \"Buscar Endereço pelo CEP\", -1 /* HOISTED */)), _createCommentVNode(\" Campo para entrada do CEP \"), _createElementVNode(\"div\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", {\n    for: \"cep\"\n  }, \"CEP:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.cep = $event),\n    placeholder: \"Digite o CEP\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.cep]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.buscarEndereco && $options.buscarEndereco(...args))\n  }, \"Buscar\")]), _createCommentVNode(\" Exibindo os dados do endereço \"), $data.endereco ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_cache[14] || (_cache[14] = _createElementVNode(\"h2\", null, \"Informações do Endereço:\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Logradouro:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.logradouro), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Complemento:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.complemento), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"strong\", null, \"Bairro:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.bairro), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"strong\", null, \"Localidade:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.localidade), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[7] || (_cache[7] = _createElementVNode(\"strong\", null, \"UF:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.uf), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"strong\", null, \"Estado:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.estado), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"strong\", null, \"Região:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.regiao), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"strong\", null, \"IBGE:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.ibge), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[11] || (_cache[11] = _createElementVNode(\"strong\", null, \"GIA:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.gia), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[12] || (_cache[12] = _createElementVNode(\"strong\", null, \"DDD:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.ddd), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[13] || (_cache[13] = _createElementVNode(\"strong\", null, \"SIAFI:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.endereco.siafi), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Exibindo uma mensagem de erro, se houver \"), $data.erro ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, _toDisplayString($data.erro), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","for","type","_cache","$event","$data","cep","placeholder","onClick","args","$options","buscarEndereco","endereco","_hoisted_2","_createTextVNode","_toDisplayString","logradouro","complemento","bairro","localidade","uf","estado","regiao","ibge","gia","ddd","siafi","erro","_hoisted_3"],"sources":["/home/romario/Área de Trabalho/Curso Coder/VueZipCode/src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"cep-form\">\n    <h1>Buscar Endereço pelo CEP</h1>\n\n    <!-- Campo para entrada do CEP -->\n    <div>\n      <label for=\"cep\">CEP:</label>\n      <input type=\"text\" v-model=\"cep\" placeholder=\"Digite o CEP\" />\n      <button @click=\"buscarEndereco\">Buscar</button>\n    </div>\n\n    <!-- Exibindo os dados do endereço -->\n    <div v-if=\"endereco\">\n      <h2>Informações do Endereço:</h2>\n      <p><strong>Logradouro:</strong> {{ endereco.logradouro }}</p>\n      <p><strong>Complemento:</strong> {{ endereco.complemento }}</p>\n      <p><strong>Bairro:</strong> {{ endereco.bairro }}</p>\n      <p><strong>Localidade:</strong> {{ endereco.localidade }}</p>\n      <p><strong>UF:</strong> {{ endereco.uf }}</p>\n      <p><strong>Estado:</strong> {{ endereco.estado }}</p>\n      <p><strong>Região:</strong> {{ endereco.regiao }}</p>\n      <p><strong>IBGE:</strong> {{ endereco.ibge }}</p>\n      <p><strong>GIA:</strong> {{ endereco.gia }}</p>\n      <p><strong>DDD:</strong> {{ endereco.ddd }}</p>\n      <p><strong>SIAFI:</strong> {{ endereco.siafi }}</p>\n    </div>\n\n    <!-- Exibindo uma mensagem de erro, se houver -->\n    <div v-if=\"erro\">\n      <p>{{ erro }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      cep: '', // CEP digitado pelo usuário\n      endereco: null, // Dados do endereço retornado pela API\n      erro: '' // Mensagem de erro caso ocorra\n    };\n  },\n  methods: {\n    async buscarEndereco() {\n      try {\n        const response = await fetch(`https://viacep.com.br/ws/${this.cep}/json/`);\n        const data = await response.json();\n\n        if (data.erro) {\n          this.erro = 'CEP não encontrado!';\n          this.endereco = null;\n        } else {\n          this.endereco = {\n            logradouro: data.logradouro,\n            complemento: data.complemento || 'N/A',\n            bairro: data.bairro,\n            localidade: data.localidade,\n            uf: data.uf,\n            estado: data.estado, // Valor fixo para o exemplo, pode ser adaptado.\n            regiao: 'Sudeste', // Valor fixo para o exemplo, pode ser adaptado.\n            ibge: data.ibge,\n            gia: data.gia || 'N/A',\n            ddd: data.ddd,\n            siafi: data.siafi\n          };\n          this.erro = '';\n        }\n      } catch (error) {\n        this.erro = 'Erro ao buscar o endereço. Verifique o CEP e tente novamente.';\n        this.endereco = null;\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.cep-form {\n  max-width: 400px;\n  margin: 20px auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n}\n\nh1 {\n  font-size: 24px;\n  margin-bottom: 20px;\n}\n\ndiv {\n  margin-bottom: 15px;\n}\n\ninput {\n  width: 100%;\n  padding: 8px;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n}\n\nbutton {\n  padding: 10px 15px;\n  background-color: #42b983;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #339a6e;\n}\n\np {\n  font-size: 16px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}